// Generated by Sichem at 2020-09-30 18:30:49

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ZlibSharp
{
    unsafe class Crc32
    {
        #region Table

        private static uint[][] crc_table = new[] {
            new [] {
              0x00000000u, 0x77073096u, 0xee0e612cu, 0x990951bau, 0x076dc419u,
              0x706af48fu, 0xe963a535u, 0x9e6495a3u, 0x0edb8832u, 0x79dcb8a4u,
              0xe0d5e91eu, 0x97d2d988u, 0x09b64c2bu, 0x7eb17cbdu, 0xe7b82d07u,
              0x90bf1d91u, 0x1db71064u, 0x6ab020f2u, 0xf3b97148u, 0x84be41deu,
              0x1adad47du, 0x6ddde4ebu, 0xf4d4b551u, 0x83d385c7u, 0x136c9856u,
              0x646ba8c0u, 0xfd62f97au, 0x8a65c9ecu, 0x14015c4fu, 0x63066cd9u,
              0xfa0f3d63u, 0x8d080df5u, 0x3b6e20c8u, 0x4c69105eu, 0xd56041e4u,
              0xa2677172u, 0x3c03e4d1u, 0x4b04d447u, 0xd20d85fdu, 0xa50ab56bu,
              0x35b5a8fau, 0x42b2986cu, 0xdbbbc9d6u, 0xacbcf940u, 0x32d86ce3u,
              0x45df5c75u, 0xdcd60dcfu, 0xabd13d59u, 0x26d930acu, 0x51de003au,
              0xc8d75180u, 0xbfd06116u, 0x21b4f4b5u, 0x56b3c423u, 0xcfba9599u,
              0xb8bda50fu, 0x2802b89eu, 0x5f058808u, 0xc60cd9b2u, 0xb10be924u,
              0x2f6f7c87u, 0x58684c11u, 0xc1611dabu, 0xb6662d3du, 0x76dc4190u,
              0x01db7106u, 0x98d220bcu, 0xefd5102au, 0x71b18589u, 0x06b6b51fu,
              0x9fbfe4a5u, 0xe8b8d433u, 0x7807c9a2u, 0x0f00f934u, 0x9609a88eu,
              0xe10e9818u, 0x7f6a0dbbu, 0x086d3d2du, 0x91646c97u, 0xe6635c01u,
              0x6b6b51f4u, 0x1c6c6162u, 0x856530d8u, 0xf262004eu, 0x6c0695edu,
              0x1b01a57bu, 0x8208f4c1u, 0xf50fc457u, 0x65b0d9c6u, 0x12b7e950u,
              0x8bbeb8eau, 0xfcb9887cu, 0x62dd1ddfu, 0x15da2d49u, 0x8cd37cf3u,
              0xfbd44c65u, 0x4db26158u, 0x3ab551ceu, 0xa3bc0074u, 0xd4bb30e2u,
              0x4adfa541u, 0x3dd895d7u, 0xa4d1c46du, 0xd3d6f4fbu, 0x4369e96au,
              0x346ed9fcu, 0xad678846u, 0xda60b8d0u, 0x44042d73u, 0x33031de5u,
              0xaa0a4c5fu, 0xdd0d7cc9u, 0x5005713cu, 0x270241aau, 0xbe0b1010u,
              0xc90c2086u, 0x5768b525u, 0x206f85b3u, 0xb966d409u, 0xce61e49fu,
              0x5edef90eu, 0x29d9c998u, 0xb0d09822u, 0xc7d7a8b4u, 0x59b33d17u,
              0x2eb40d81u, 0xb7bd5c3bu, 0xc0ba6cadu, 0xedb88320u, 0x9abfb3b6u,
              0x03b6e20cu, 0x74b1d29au, 0xead54739u, 0x9dd277afu, 0x04db2615u,
              0x73dc1683u, 0xe3630b12u, 0x94643b84u, 0x0d6d6a3eu, 0x7a6a5aa8u,
              0xe40ecf0bu, 0x9309ff9du, 0x0a00ae27u, 0x7d079eb1u, 0xf00f9344u,
              0x8708a3d2u, 0x1e01f268u, 0x6906c2feu, 0xf762575du, 0x806567cbu,
              0x196c3671u, 0x6e6b06e7u, 0xfed41b76u, 0x89d32be0u, 0x10da7a5au,
              0x67dd4accu, 0xf9b9df6fu, 0x8ebeeff9u, 0x17b7be43u, 0x60b08ed5u,
              0xd6d6a3e8u, 0xa1d1937eu, 0x38d8c2c4u, 0x4fdff252u, 0xd1bb67f1u,
              0xa6bc5767u, 0x3fb506ddu, 0x48b2364bu, 0xd80d2bdau, 0xaf0a1b4cu,
              0x36034af6u, 0x41047a60u, 0xdf60efc3u, 0xa867df55u, 0x316e8eefu,
              0x4669be79u, 0xcb61b38cu, 0xbc66831au, 0x256fd2a0u, 0x5268e236u,
              0xcc0c7795u, 0xbb0b4703u, 0x220216b9u, 0x5505262fu, 0xc5ba3bbeu,
              0xb2bd0b28u, 0x2bb45a92u, 0x5cb36a04u, 0xc2d7ffa7u, 0xb5d0cf31u,
              0x2cd99e8bu, 0x5bdeae1du, 0x9b64c2b0u, 0xec63f226u, 0x756aa39cu,
              0x026d930au, 0x9c0906a9u, 0xeb0e363fu, 0x72076785u, 0x05005713u,
              0x95bf4a82u, 0xe2b87a14u, 0x7bb12baeu, 0x0cb61b38u, 0x92d28e9bu,
              0xe5d5be0du, 0x7cdcefb7u, 0x0bdbdf21u, 0x86d3d2d4u, 0xf1d4e242u,
              0x68ddb3f8u, 0x1fda836eu, 0x81be16cdu, 0xf6b9265bu, 0x6fb077e1u,
              0x18b74777u, 0x88085ae6u, 0xff0f6a70u, 0x66063bcau, 0x11010b5cu,
              0x8f659effu, 0xf862ae69u, 0x616bffd3u, 0x166ccf45u, 0xa00ae278u,
              0xd70dd2eeu, 0x4e048354u, 0x3903b3c2u, 0xa7672661u, 0xd06016f7u,
              0x4969474du, 0x3e6e77dbu, 0xaed16a4au, 0xd9d65adcu, 0x40df0b66u,
              0x37d83bf0u, 0xa9bcae53u, 0xdebb9ec5u, 0x47b2cf7fu, 0x30b5ffe9u,
              0xbdbdf21cu, 0xcabac28au, 0x53b39330u, 0x24b4a3a6u, 0xbad03605u,
              0xcdd70693u, 0x54de5729u, 0x23d967bfu, 0xb3667a2eu, 0xc4614ab8u,
              0x5d681b02u, 0x2a6f2b94u, 0xb40bbe37u, 0xc30c8ea1u, 0x5a05df1bu,
              0x2d02ef8du
          },
          new [] {
              0x00000000u, 0x191b3141u, 0x32366282u, 0x2b2d53c3u, 0x646cc504u,
              0x7d77f445u, 0x565aa786u, 0x4f4196c7u, 0xc8d98a08u, 0xd1c2bb49u,
              0xfaefe88au, 0xe3f4d9cbu, 0xacb54f0cu, 0xb5ae7e4du, 0x9e832d8eu,
              0x87981ccfu, 0x4ac21251u, 0x53d92310u, 0x78f470d3u, 0x61ef4192u,
              0x2eaed755u, 0x37b5e614u, 0x1c98b5d7u, 0x05838496u, 0x821b9859u,
              0x9b00a918u, 0xb02dfadbu, 0xa936cb9au, 0xe6775d5du, 0xff6c6c1cu,
              0xd4413fdfu, 0xcd5a0e9eu, 0x958424a2u, 0x8c9f15e3u, 0xa7b24620u,
              0xbea97761u, 0xf1e8e1a6u, 0xe8f3d0e7u, 0xc3de8324u, 0xdac5b265u,
              0x5d5daeaau, 0x44469febu, 0x6f6bcc28u, 0x7670fd69u, 0x39316baeu,
              0x202a5aefu, 0x0b07092cu, 0x121c386du, 0xdf4636f3u, 0xc65d07b2u,
              0xed705471u, 0xf46b6530u, 0xbb2af3f7u, 0xa231c2b6u, 0x891c9175u,
              0x9007a034u, 0x179fbcfbu, 0x0e848dbau, 0x25a9de79u, 0x3cb2ef38u,
              0x73f379ffu, 0x6ae848beu, 0x41c51b7du, 0x58de2a3cu, 0xf0794f05u,
              0xe9627e44u, 0xc24f2d87u, 0xdb541cc6u, 0x94158a01u, 0x8d0ebb40u,
              0xa623e883u, 0xbf38d9c2u, 0x38a0c50du, 0x21bbf44cu, 0x0a96a78fu,
              0x138d96ceu, 0x5ccc0009u, 0x45d73148u, 0x6efa628bu, 0x77e153cau,
              0xbabb5d54u, 0xa3a06c15u, 0x888d3fd6u, 0x91960e97u, 0xded79850u,
              0xc7cca911u, 0xece1fad2u, 0xf5facb93u, 0x7262d75cu, 0x6b79e61du,
              0x4054b5deu, 0x594f849fu, 0x160e1258u, 0x0f152319u, 0x243870dau,
              0x3d23419bu, 0x65fd6ba7u, 0x7ce65ae6u, 0x57cb0925u, 0x4ed03864u,
              0x0191aea3u, 0x188a9fe2u, 0x33a7cc21u, 0x2abcfd60u, 0xad24e1afu,
              0xb43fd0eeu, 0x9f12832du, 0x8609b26cu, 0xc94824abu, 0xd05315eau,
              0xfb7e4629u, 0xe2657768u, 0x2f3f79f6u, 0x362448b7u, 0x1d091b74u,
              0x04122a35u, 0x4b53bcf2u, 0x52488db3u, 0x7965de70u, 0x607eef31u,
              0xe7e6f3feu, 0xfefdc2bfu, 0xd5d0917cu, 0xcccba03du, 0x838a36fau,
              0x9a9107bbu, 0xb1bc5478u, 0xa8a76539u, 0x3b83984bu, 0x2298a90au,
              0x09b5fac9u, 0x10aecb88u, 0x5fef5d4fu, 0x46f46c0eu, 0x6dd93fcdu,
              0x74c20e8cu, 0xf35a1243u, 0xea412302u, 0xc16c70c1u, 0xd8774180u,
              0x9736d747u, 0x8e2de606u, 0xa500b5c5u, 0xbc1b8484u, 0x71418a1au,
              0x685abb5bu, 0x4377e898u, 0x5a6cd9d9u, 0x152d4f1eu, 0x0c367e5fu,
              0x271b2d9cu, 0x3e001cddu, 0xb9980012u, 0xa0833153u, 0x8bae6290u,
              0x92b553d1u, 0xddf4c516u, 0xc4eff457u, 0xefc2a794u, 0xf6d996d5u,
              0xae07bce9u, 0xb71c8da8u, 0x9c31de6bu, 0x852aef2au, 0xca6b79edu,
              0xd37048acu, 0xf85d1b6fu, 0xe1462a2eu, 0x66de36e1u, 0x7fc507a0u,
              0x54e85463u, 0x4df36522u, 0x02b2f3e5u, 0x1ba9c2a4u, 0x30849167u,
              0x299fa026u, 0xe4c5aeb8u, 0xfdde9ff9u, 0xd6f3cc3au, 0xcfe8fd7bu,
              0x80a96bbcu, 0x99b25afdu, 0xb29f093eu, 0xab84387fu, 0x2c1c24b0u,
              0x350715f1u, 0x1e2a4632u, 0x07317773u, 0x4870e1b4u, 0x516bd0f5u,
              0x7a468336u, 0x635db277u, 0xcbfad74eu, 0xd2e1e60fu, 0xf9ccb5ccu,
              0xe0d7848du, 0xaf96124au, 0xb68d230bu, 0x9da070c8u, 0x84bb4189u,
              0x03235d46u, 0x1a386c07u, 0x31153fc4u, 0x280e0e85u, 0x674f9842u,
              0x7e54a903u, 0x5579fac0u, 0x4c62cb81u, 0x8138c51fu, 0x9823f45eu,
              0xb30ea79du, 0xaa1596dcu, 0xe554001bu, 0xfc4f315au, 0xd7626299u,
              0xce7953d8u, 0x49e14f17u, 0x50fa7e56u, 0x7bd72d95u, 0x62cc1cd4u,
              0x2d8d8a13u, 0x3496bb52u, 0x1fbbe891u, 0x06a0d9d0u, 0x5e7ef3ecu,
              0x4765c2adu, 0x6c48916eu, 0x7553a02fu, 0x3a1236e8u, 0x230907a9u,
              0x0824546au, 0x113f652bu, 0x96a779e4u, 0x8fbc48a5u, 0xa4911b66u,
              0xbd8a2a27u, 0xf2cbbce0u, 0xebd08da1u, 0xc0fdde62u, 0xd9e6ef23u,
              0x14bce1bdu, 0x0da7d0fcu, 0x268a833fu, 0x3f91b27eu, 0x70d024b9u,
              0x69cb15f8u, 0x42e6463bu, 0x5bfd777au, 0xdc656bb5u, 0xc57e5af4u,
              0xee530937u, 0xf7483876u, 0xb809aeb1u, 0xa1129ff0u, 0x8a3fcc33u,
              0x9324fd72u
          },
          new [] {
              0x00000000u, 0x01c26a37u, 0x0384d46eu, 0x0246be59u, 0x0709a8dcu,
              0x06cbc2ebu, 0x048d7cb2u, 0x054f1685u, 0x0e1351b8u, 0x0fd13b8fu,
              0x0d9785d6u, 0x0c55efe1u, 0x091af964u, 0x08d89353u, 0x0a9e2d0au,
              0x0b5c473du, 0x1c26a370u, 0x1de4c947u, 0x1fa2771eu, 0x1e601d29u,
              0x1b2f0bacu, 0x1aed619bu, 0x18abdfc2u, 0x1969b5f5u, 0x1235f2c8u,
              0x13f798ffu, 0x11b126a6u, 0x10734c91u, 0x153c5a14u, 0x14fe3023u,
              0x16b88e7au, 0x177ae44du, 0x384d46e0u, 0x398f2cd7u, 0x3bc9928eu,
              0x3a0bf8b9u, 0x3f44ee3cu, 0x3e86840bu, 0x3cc03a52u, 0x3d025065u,
              0x365e1758u, 0x379c7d6fu, 0x35dac336u, 0x3418a901u, 0x3157bf84u,
              0x3095d5b3u, 0x32d36beau, 0x331101ddu, 0x246be590u, 0x25a98fa7u,
              0x27ef31feu, 0x262d5bc9u, 0x23624d4cu, 0x22a0277bu, 0x20e69922u,
              0x2124f315u, 0x2a78b428u, 0x2bbade1fu, 0x29fc6046u, 0x283e0a71u,
              0x2d711cf4u, 0x2cb376c3u, 0x2ef5c89au, 0x2f37a2adu, 0x709a8dc0u,
              0x7158e7f7u, 0x731e59aeu, 0x72dc3399u, 0x7793251cu, 0x76514f2bu,
              0x7417f172u, 0x75d59b45u, 0x7e89dc78u, 0x7f4bb64fu, 0x7d0d0816u,
              0x7ccf6221u, 0x798074a4u, 0x78421e93u, 0x7a04a0cau, 0x7bc6cafdu,
              0x6cbc2eb0u, 0x6d7e4487u, 0x6f38fadeu, 0x6efa90e9u, 0x6bb5866cu,
              0x6a77ec5bu, 0x68315202u, 0x69f33835u, 0x62af7f08u, 0x636d153fu,
              0x612bab66u, 0x60e9c151u, 0x65a6d7d4u, 0x6464bde3u, 0x662203bau,
              0x67e0698du, 0x48d7cb20u, 0x4915a117u, 0x4b531f4eu, 0x4a917579u,
              0x4fde63fcu, 0x4e1c09cbu, 0x4c5ab792u, 0x4d98dda5u, 0x46c49a98u,
              0x4706f0afu, 0x45404ef6u, 0x448224c1u, 0x41cd3244u, 0x400f5873u,
              0x4249e62au, 0x438b8c1du, 0x54f16850u, 0x55330267u, 0x5775bc3eu,
              0x56b7d609u, 0x53f8c08cu, 0x523aaabbu, 0x507c14e2u, 0x51be7ed5u,
              0x5ae239e8u, 0x5b2053dfu, 0x5966ed86u, 0x58a487b1u, 0x5deb9134u,
              0x5c29fb03u, 0x5e6f455au, 0x5fad2f6du, 0xe1351b80u, 0xe0f771b7u,
              0xe2b1cfeeu, 0xe373a5d9u, 0xe63cb35cu, 0xe7fed96bu, 0xe5b86732u,
              0xe47a0d05u, 0xef264a38u, 0xeee4200fu, 0xeca29e56u, 0xed60f461u,
              0xe82fe2e4u, 0xe9ed88d3u, 0xebab368au, 0xea695cbdu, 0xfd13b8f0u,
              0xfcd1d2c7u, 0xfe976c9eu, 0xff5506a9u, 0xfa1a102cu, 0xfbd87a1bu,
              0xf99ec442u, 0xf85cae75u, 0xf300e948u, 0xf2c2837fu, 0xf0843d26u,
              0xf1465711u, 0xf4094194u, 0xf5cb2ba3u, 0xf78d95fau, 0xf64fffcdu,
              0xd9785d60u, 0xd8ba3757u, 0xdafc890eu, 0xdb3ee339u, 0xde71f5bcu,
              0xdfb39f8bu, 0xddf521d2u, 0xdc374be5u, 0xd76b0cd8u, 0xd6a966efu,
              0xd4efd8b6u, 0xd52db281u, 0xd062a404u, 0xd1a0ce33u, 0xd3e6706au,
              0xd2241a5du, 0xc55efe10u, 0xc49c9427u, 0xc6da2a7eu, 0xc7184049u,
              0xc25756ccu, 0xc3953cfbu, 0xc1d382a2u, 0xc011e895u, 0xcb4dafa8u,
              0xca8fc59fu, 0xc8c97bc6u, 0xc90b11f1u, 0xcc440774u, 0xcd866d43u,
              0xcfc0d31au, 0xce02b92du, 0x91af9640u, 0x906dfc77u, 0x922b422eu,
              0x93e92819u, 0x96a63e9cu, 0x976454abu, 0x9522eaf2u, 0x94e080c5u,
              0x9fbcc7f8u, 0x9e7eadcfu, 0x9c381396u, 0x9dfa79a1u, 0x98b56f24u,
              0x99770513u, 0x9b31bb4au, 0x9af3d17du, 0x8d893530u, 0x8c4b5f07u,
              0x8e0de15eu, 0x8fcf8b69u, 0x8a809decu, 0x8b42f7dbu, 0x89044982u,
              0x88c623b5u, 0x839a6488u, 0x82580ebfu, 0x801eb0e6u, 0x81dcdad1u,
              0x8493cc54u, 0x8551a663u, 0x8717183au, 0x86d5720du, 0xa9e2d0a0u,
              0xa820ba97u, 0xaa6604ceu, 0xaba46ef9u, 0xaeeb787cu, 0xaf29124bu,
              0xad6fac12u, 0xacadc625u, 0xa7f18118u, 0xa633eb2fu, 0xa4755576u,
              0xa5b73f41u, 0xa0f829c4u, 0xa13a43f3u, 0xa37cfdaau, 0xa2be979du,
              0xb5c473d0u, 0xb40619e7u, 0xb640a7beu, 0xb782cd89u, 0xb2cddb0cu,
              0xb30fb13bu, 0xb1490f62u, 0xb08b6555u, 0xbbd72268u, 0xba15485fu,
              0xb853f606u, 0xb9919c31u, 0xbcde8ab4u, 0xbd1ce083u, 0xbf5a5edau,
              0xbe9834edu
          },
          new [] {
              0x00000000u, 0xb8bc6765u, 0xaa09c88bu, 0x12b5afeeu, 0x8f629757u,
              0x37def032u, 0x256b5fdcu, 0x9dd738b9u, 0xc5b428efu, 0x7d084f8au,
              0x6fbde064u, 0xd7018701u, 0x4ad6bfb8u, 0xf26ad8ddu, 0xe0df7733u,
              0x58631056u, 0x5019579fu, 0xe8a530fau, 0xfa109f14u, 0x42acf871u,
              0xdf7bc0c8u, 0x67c7a7adu, 0x75720843u, 0xcdce6f26u, 0x95ad7f70u,
              0x2d111815u, 0x3fa4b7fbu, 0x8718d09eu, 0x1acfe827u, 0xa2738f42u,
              0xb0c620acu, 0x087a47c9u, 0xa032af3eu, 0x188ec85bu, 0x0a3b67b5u,
              0xb28700d0u, 0x2f503869u, 0x97ec5f0cu, 0x8559f0e2u, 0x3de59787u,
              0x658687d1u, 0xdd3ae0b4u, 0xcf8f4f5au, 0x7733283fu, 0xeae41086u,
              0x525877e3u, 0x40edd80du, 0xf851bf68u, 0xf02bf8a1u, 0x48979fc4u,
              0x5a22302au, 0xe29e574fu, 0x7f496ff6u, 0xc7f50893u, 0xd540a77du,
              0x6dfcc018u, 0x359fd04eu, 0x8d23b72bu, 0x9f9618c5u, 0x272a7fa0u,
              0xbafd4719u, 0x0241207cu, 0x10f48f92u, 0xa848e8f7u, 0x9b14583du,
              0x23a83f58u, 0x311d90b6u, 0x89a1f7d3u, 0x1476cf6au, 0xaccaa80fu,
              0xbe7f07e1u, 0x06c36084u, 0x5ea070d2u, 0xe61c17b7u, 0xf4a9b859u,
              0x4c15df3cu, 0xd1c2e785u, 0x697e80e0u, 0x7bcb2f0eu, 0xc377486bu,
              0xcb0d0fa2u, 0x73b168c7u, 0x6104c729u, 0xd9b8a04cu, 0x446f98f5u,
              0xfcd3ff90u, 0xee66507eu, 0x56da371bu, 0x0eb9274du, 0xb6054028u,
              0xa4b0efc6u, 0x1c0c88a3u, 0x81dbb01au, 0x3967d77fu, 0x2bd27891u,
              0x936e1ff4u, 0x3b26f703u, 0x839a9066u, 0x912f3f88u, 0x299358edu,
              0xb4446054u, 0x0cf80731u, 0x1e4da8dfu, 0xa6f1cfbau, 0xfe92dfecu,
              0x462eb889u, 0x549b1767u, 0xec277002u, 0x71f048bbu, 0xc94c2fdeu,
              0xdbf98030u, 0x6345e755u, 0x6b3fa09cu, 0xd383c7f9u, 0xc1366817u,
              0x798a0f72u, 0xe45d37cbu, 0x5ce150aeu, 0x4e54ff40u, 0xf6e89825u,
              0xae8b8873u, 0x1637ef16u, 0x048240f8u, 0xbc3e279du, 0x21e91f24u,
              0x99557841u, 0x8be0d7afu, 0x335cb0cau, 0xed59b63bu, 0x55e5d15eu,
              0x47507eb0u, 0xffec19d5u, 0x623b216cu, 0xda874609u, 0xc832e9e7u,
              0x708e8e82u, 0x28ed9ed4u, 0x9051f9b1u, 0x82e4565fu, 0x3a58313au,
              0xa78f0983u, 0x1f336ee6u, 0x0d86c108u, 0xb53aa66du, 0xbd40e1a4u,
              0x05fc86c1u, 0x1749292fu, 0xaff54e4au, 0x322276f3u, 0x8a9e1196u,
              0x982bbe78u, 0x2097d91du, 0x78f4c94bu, 0xc048ae2eu, 0xd2fd01c0u,
              0x6a4166a5u, 0xf7965e1cu, 0x4f2a3979u, 0x5d9f9697u, 0xe523f1f2u,
              0x4d6b1905u, 0xf5d77e60u, 0xe762d18eu, 0x5fdeb6ebu, 0xc2098e52u,
              0x7ab5e937u, 0x680046d9u, 0xd0bc21bcu, 0x88df31eau, 0x3063568fu,
              0x22d6f961u, 0x9a6a9e04u, 0x07bda6bdu, 0xbf01c1d8u, 0xadb46e36u,
              0x15080953u, 0x1d724e9au, 0xa5ce29ffu, 0xb77b8611u, 0x0fc7e174u,
              0x9210d9cdu, 0x2aacbea8u, 0x38191146u, 0x80a57623u, 0xd8c66675u,
              0x607a0110u, 0x72cfaefeu, 0xca73c99bu, 0x57a4f122u, 0xef189647u,
              0xfdad39a9u, 0x45115eccu, 0x764dee06u, 0xcef18963u, 0xdc44268du,
              0x64f841e8u, 0xf92f7951u, 0x41931e34u, 0x5326b1dau, 0xeb9ad6bfu,
              0xb3f9c6e9u, 0x0b45a18cu, 0x19f00e62u, 0xa14c6907u, 0x3c9b51beu,
              0x842736dbu, 0x96929935u, 0x2e2efe50u, 0x2654b999u, 0x9ee8defcu,
              0x8c5d7112u, 0x34e11677u, 0xa9362eceu, 0x118a49abu, 0x033fe645u,
              0xbb838120u, 0xe3e09176u, 0x5b5cf613u, 0x49e959fdu, 0xf1553e98u,
              0x6c820621u, 0xd43e6144u, 0xc68bceaau, 0x7e37a9cfu, 0xd67f4138u,
              0x6ec3265du, 0x7c7689b3u, 0xc4caeed6u, 0x591dd66fu, 0xe1a1b10au,
              0xf3141ee4u, 0x4ba87981u, 0x13cb69d7u, 0xab770eb2u, 0xb9c2a15cu,
              0x017ec639u, 0x9ca9fe80u, 0x241599e5u, 0x36a0360bu, 0x8e1c516eu,
              0x866616a7u, 0x3eda71c2u, 0x2c6fde2cu, 0x94d3b949u, 0x090481f0u,
              0xb1b8e695u, 0xa30d497bu, 0x1bb12e1eu, 0x43d23e48u, 0xfb6e592du,
              0xe9dbf6c3u, 0x516791a6u, 0xccb0a91fu, 0x740cce7au, 0x66b96194u,
              0xde0506f1u
          },
          new [] {
              0x00000000u, 0x96300777u, 0x2c610eeeu, 0xba510999u, 0x19c46d07u,
              0x8ff46a70u, 0x35a563e9u, 0xa395649eu, 0x3288db0eu, 0xa4b8dc79u,
              0x1ee9d5e0u, 0x88d9d297u, 0x2b4cb609u, 0xbd7cb17eu, 0x072db8e7u,
              0x911dbf90u, 0x6410b71du, 0xf220b06au, 0x4871b9f3u, 0xde41be84u,
              0x7dd4da1au, 0xebe4dd6du, 0x51b5d4f4u, 0xc785d383u, 0x56986c13u,
              0xc0a86b64u, 0x7af962fdu, 0xecc9658au, 0x4f5c0114u, 0xd96c0663u,
              0x633d0ffau, 0xf50d088du, 0xc8206e3bu, 0x5e10694cu, 0xe44160d5u,
              0x727167a2u, 0xd1e4033cu, 0x47d4044bu, 0xfd850dd2u, 0x6bb50aa5u,
              0xfaa8b535u, 0x6c98b242u, 0xd6c9bbdbu, 0x40f9bcacu, 0xe36cd832u,
              0x755cdf45u, 0xcf0dd6dcu, 0x593dd1abu, 0xac30d926u, 0x3a00de51u,
              0x8051d7c8u, 0x1661d0bfu, 0xb5f4b421u, 0x23c4b356u, 0x9995bacfu,
              0x0fa5bdb8u, 0x9eb80228u, 0x0888055fu, 0xb2d90cc6u, 0x24e90bb1u,
              0x877c6f2fu, 0x114c6858u, 0xab1d61c1u, 0x3d2d66b6u, 0x9041dc76u,
              0x0671db01u, 0xbc20d298u, 0x2a10d5efu, 0x8985b171u, 0x1fb5b606u,
              0xa5e4bf9fu, 0x33d4b8e8u, 0xa2c90778u, 0x34f9000fu, 0x8ea80996u,
              0x18980ee1u, 0xbb0d6a7fu, 0x2d3d6d08u, 0x976c6491u, 0x015c63e6u,
              0xf4516b6bu, 0x62616c1cu, 0xd8306585u, 0x4e0062f2u, 0xed95066cu,
              0x7ba5011bu, 0xc1f40882u, 0x57c40ff5u, 0xc6d9b065u, 0x50e9b712u,
              0xeab8be8bu, 0x7c88b9fcu, 0xdf1ddd62u, 0x492dda15u, 0xf37cd38cu,
              0x654cd4fbu, 0x5861b24du, 0xce51b53au, 0x7400bca3u, 0xe230bbd4u,
              0x41a5df4au, 0xd795d83du, 0x6dc4d1a4u, 0xfbf4d6d3u, 0x6ae96943u,
              0xfcd96e34u, 0x468867adu, 0xd0b860dau, 0x732d0444u, 0xe51d0333u,
              0x5f4c0aaau, 0xc97c0dddu, 0x3c710550u, 0xaa410227u, 0x10100bbeu,
              0x86200cc9u, 0x25b56857u, 0xb3856f20u, 0x09d466b9u, 0x9fe461ceu,
              0x0ef9de5eu, 0x98c9d929u, 0x2298d0b0u, 0xb4a8d7c7u, 0x173db359u,
              0x810db42eu, 0x3b5cbdb7u, 0xad6cbac0u, 0x2083b8edu, 0xb6b3bf9au,
              0x0ce2b603u, 0x9ad2b174u, 0x3947d5eau, 0xaf77d29du, 0x1526db04u,
              0x8316dc73u, 0x120b63e3u, 0x843b6494u, 0x3e6a6d0du, 0xa85a6a7au,
              0x0bcf0ee4u, 0x9dff0993u, 0x27ae000au, 0xb19e077du, 0x44930ff0u,
              0xd2a30887u, 0x68f2011eu, 0xfec20669u, 0x5d5762f7u, 0xcb676580u,
              0x71366c19u, 0xe7066b6eu, 0x761bd4feu, 0xe02bd389u, 0x5a7ada10u,
              0xcc4add67u, 0x6fdfb9f9u, 0xf9efbe8eu, 0x43beb717u, 0xd58eb060u,
              0xe8a3d6d6u, 0x7e93d1a1u, 0xc4c2d838u, 0x52f2df4fu, 0xf167bbd1u,
              0x6757bca6u, 0xdd06b53fu, 0x4b36b248u, 0xda2b0dd8u, 0x4c1b0aafu,
              0xf64a0336u, 0x607a0441u, 0xc3ef60dfu, 0x55df67a8u, 0xef8e6e31u,
              0x79be6946u, 0x8cb361cbu, 0x1a8366bcu, 0xa0d26f25u, 0x36e26852u,
              0x95770cccu, 0x03470bbbu, 0xb9160222u, 0x2f260555u, 0xbe3bbac5u,
              0x280bbdb2u, 0x925ab42bu, 0x046ab35cu, 0xa7ffd7c2u, 0x31cfd0b5u,
              0x8b9ed92cu, 0x1daede5bu, 0xb0c2649bu, 0x26f263ecu, 0x9ca36a75u,
              0x0a936d02u, 0xa906099cu, 0x3f360eebu, 0x85670772u, 0x13570005u,
              0x824abf95u, 0x147ab8e2u, 0xae2bb17bu, 0x381bb60cu, 0x9b8ed292u,
              0x0dbed5e5u, 0xb7efdc7cu, 0x21dfdb0bu, 0xd4d2d386u, 0x42e2d4f1u,
              0xf8b3dd68u, 0x6e83da1fu, 0xcd16be81u, 0x5b26b9f6u, 0xe177b06fu,
              0x7747b718u, 0xe65a0888u, 0x706a0fffu, 0xca3b0666u, 0x5c0b0111u,
              0xff9e658fu, 0x69ae62f8u, 0xd3ff6b61u, 0x45cf6c16u, 0x78e20aa0u,
              0xeed20dd7u, 0x5483044eu, 0xc2b30339u, 0x612667a7u, 0xf71660d0u,
              0x4d476949u, 0xdb776e3eu, 0x4a6ad1aeu, 0xdc5ad6d9u, 0x660bdf40u,
              0xf03bd837u, 0x53aebca9u, 0xc59ebbdeu, 0x7fcfb247u, 0xe9ffb530u,
              0x1cf2bdbdu, 0x8ac2bacau, 0x3093b353u, 0xa6a3b424u, 0x0536d0bau,
              0x9306d7cdu, 0x2957de54u, 0xbf67d923u, 0x2e7a66b3u, 0xb84a61c4u,
              0x021b685du, 0x942b6f2au, 0x37be0bb4u, 0xa18e0cc3u, 0x1bdf055au,
              0x8def022du
          },
          new [] {
              0x00000000u, 0x41311b19u, 0x82623632u, 0xc3532d2bu, 0x04c56c64u,
              0x45f4777du, 0x86a75a56u, 0xc796414fu, 0x088ad9c8u, 0x49bbc2d1u,
              0x8ae8effau, 0xcbd9f4e3u, 0x0c4fb5acu, 0x4d7eaeb5u, 0x8e2d839eu,
              0xcf1c9887u, 0x5112c24au, 0x1023d953u, 0xd370f478u, 0x9241ef61u,
              0x55d7ae2eu, 0x14e6b537u, 0xd7b5981cu, 0x96848305u, 0x59981b82u,
              0x18a9009bu, 0xdbfa2db0u, 0x9acb36a9u, 0x5d5d77e6u, 0x1c6c6cffu,
              0xdf3f41d4u, 0x9e0e5acdu, 0xa2248495u, 0xe3159f8cu, 0x2046b2a7u,
              0x6177a9beu, 0xa6e1e8f1u, 0xe7d0f3e8u, 0x2483dec3u, 0x65b2c5dau,
              0xaaae5d5du, 0xeb9f4644u, 0x28cc6b6fu, 0x69fd7076u, 0xae6b3139u,
              0xef5a2a20u, 0x2c09070bu, 0x6d381c12u, 0xf33646dfu, 0xb2075dc6u,
              0x715470edu, 0x30656bf4u, 0xf7f32abbu, 0xb6c231a2u, 0x75911c89u,
              0x34a00790u, 0xfbbc9f17u, 0xba8d840eu, 0x79dea925u, 0x38efb23cu,
              0xff79f373u, 0xbe48e86au, 0x7d1bc541u, 0x3c2ade58u, 0x054f79f0u,
              0x447e62e9u, 0x872d4fc2u, 0xc61c54dbu, 0x018a1594u, 0x40bb0e8du,
              0x83e823a6u, 0xc2d938bfu, 0x0dc5a038u, 0x4cf4bb21u, 0x8fa7960au,
              0xce968d13u, 0x0900cc5cu, 0x4831d745u, 0x8b62fa6eu, 0xca53e177u,
              0x545dbbbau, 0x156ca0a3u, 0xd63f8d88u, 0x970e9691u, 0x5098d7deu,
              0x11a9ccc7u, 0xd2fae1ecu, 0x93cbfaf5u, 0x5cd76272u, 0x1de6796bu,
              0xdeb55440u, 0x9f844f59u, 0x58120e16u, 0x1923150fu, 0xda703824u,
              0x9b41233du, 0xa76bfd65u, 0xe65ae67cu, 0x2509cb57u, 0x6438d04eu,
              0xa3ae9101u, 0xe29f8a18u, 0x21cca733u, 0x60fdbc2au, 0xafe124adu,
              0xeed03fb4u, 0x2d83129fu, 0x6cb20986u, 0xab2448c9u, 0xea1553d0u,
              0x29467efbu, 0x687765e2u, 0xf6793f2fu, 0xb7482436u, 0x741b091du,
              0x352a1204u, 0xf2bc534bu, 0xb38d4852u, 0x70de6579u, 0x31ef7e60u,
              0xfef3e6e7u, 0xbfc2fdfeu, 0x7c91d0d5u, 0x3da0cbccu, 0xfa368a83u,
              0xbb07919au, 0x7854bcb1u, 0x3965a7a8u, 0x4b98833bu, 0x0aa99822u,
              0xc9fab509u, 0x88cbae10u, 0x4f5def5fu, 0x0e6cf446u, 0xcd3fd96du,
              0x8c0ec274u, 0x43125af3u, 0x022341eau, 0xc1706cc1u, 0x804177d8u,
              0x47d73697u, 0x06e62d8eu, 0xc5b500a5u, 0x84841bbcu, 0x1a8a4171u,
              0x5bbb5a68u, 0x98e87743u, 0xd9d96c5au, 0x1e4f2d15u, 0x5f7e360cu,
              0x9c2d1b27u, 0xdd1c003eu, 0x120098b9u, 0x533183a0u, 0x9062ae8bu,
              0xd153b592u, 0x16c5f4ddu, 0x57f4efc4u, 0x94a7c2efu, 0xd596d9f6u,
              0xe9bc07aeu, 0xa88d1cb7u, 0x6bde319cu, 0x2aef2a85u, 0xed796bcau,
              0xac4870d3u, 0x6f1b5df8u, 0x2e2a46e1u, 0xe136de66u, 0xa007c57fu,
              0x6354e854u, 0x2265f34du, 0xe5f3b202u, 0xa4c2a91bu, 0x67918430u,
              0x26a09f29u, 0xb8aec5e4u, 0xf99fdefdu, 0x3accf3d6u, 0x7bfde8cfu,
              0xbc6ba980u, 0xfd5ab299u, 0x3e099fb2u, 0x7f3884abu, 0xb0241c2cu,
              0xf1150735u, 0x32462a1eu, 0x73773107u, 0xb4e17048u, 0xf5d06b51u,
              0x3683467au, 0x77b25d63u, 0x4ed7facbu, 0x0fe6e1d2u, 0xccb5ccf9u,
              0x8d84d7e0u, 0x4a1296afu, 0x0b238db6u, 0xc870a09du, 0x8941bb84u,
              0x465d2303u, 0x076c381au, 0xc43f1531u, 0x850e0e28u, 0x42984f67u,
              0x03a9547eu, 0xc0fa7955u, 0x81cb624cu, 0x1fc53881u, 0x5ef42398u,
              0x9da70eb3u, 0xdc9615aau, 0x1b0054e5u, 0x5a314ffcu, 0x996262d7u,
              0xd85379ceu, 0x174fe149u, 0x567efa50u, 0x952dd77bu, 0xd41ccc62u,
              0x138a8d2du, 0x52bb9634u, 0x91e8bb1fu, 0xd0d9a006u, 0xecf37e5eu,
              0xadc26547u, 0x6e91486cu, 0x2fa05375u, 0xe836123au, 0xa9070923u,
              0x6a542408u, 0x2b653f11u, 0xe479a796u, 0xa548bc8fu, 0x661b91a4u,
              0x272a8abdu, 0xe0bccbf2u, 0xa18dd0ebu, 0x62defdc0u, 0x23efe6d9u,
              0xbde1bc14u, 0xfcd0a70du, 0x3f838a26u, 0x7eb2913fu, 0xb924d070u,
              0xf815cb69u, 0x3b46e642u, 0x7a77fd5bu, 0xb56b65dcu, 0xf45a7ec5u,
              0x370953eeu, 0x763848f7u, 0xb1ae09b8u, 0xf09f12a1u, 0x33cc3f8au,
              0x72fd2493u
          },
          new [] {
              0x00000000u, 0x376ac201u, 0x6ed48403u, 0x59be4602u, 0xdca80907u,
              0xebc2cb06u, 0xb27c8d04u, 0x85164f05u, 0xb851130eu, 0x8f3bd10fu,
              0xd685970du, 0xe1ef550cu, 0x64f91a09u, 0x5393d808u, 0x0a2d9e0au,
              0x3d475c0bu, 0x70a3261cu, 0x47c9e41du, 0x1e77a21fu, 0x291d601eu,
              0xac0b2f1bu, 0x9b61ed1au, 0xc2dfab18u, 0xf5b56919u, 0xc8f23512u,
              0xff98f713u, 0xa626b111u, 0x914c7310u, 0x145a3c15u, 0x2330fe14u,
              0x7a8eb816u, 0x4de47a17u, 0xe0464d38u, 0xd72c8f39u, 0x8e92c93bu,
              0xb9f80b3au, 0x3cee443fu, 0x0b84863eu, 0x523ac03cu, 0x6550023du,
              0x58175e36u, 0x6f7d9c37u, 0x36c3da35u, 0x01a91834u, 0x84bf5731u,
              0xb3d59530u, 0xea6bd332u, 0xdd011133u, 0x90e56b24u, 0xa78fa925u,
              0xfe31ef27u, 0xc95b2d26u, 0x4c4d6223u, 0x7b27a022u, 0x2299e620u,
              0x15f32421u, 0x28b4782au, 0x1fdeba2bu, 0x4660fc29u, 0x710a3e28u,
              0xf41c712du, 0xc376b32cu, 0x9ac8f52eu, 0xada2372fu, 0xc08d9a70u,
              0xf7e75871u, 0xae591e73u, 0x9933dc72u, 0x1c259377u, 0x2b4f5176u,
              0x72f11774u, 0x459bd575u, 0x78dc897eu, 0x4fb64b7fu, 0x16080d7du,
              0x2162cf7cu, 0xa4748079u, 0x931e4278u, 0xcaa0047au, 0xfdcac67bu,
              0xb02ebc6cu, 0x87447e6du, 0xdefa386fu, 0xe990fa6eu, 0x6c86b56bu,
              0x5bec776au, 0x02523168u, 0x3538f369u, 0x087faf62u, 0x3f156d63u,
              0x66ab2b61u, 0x51c1e960u, 0xd4d7a665u, 0xe3bd6464u, 0xba032266u,
              0x8d69e067u, 0x20cbd748u, 0x17a11549u, 0x4e1f534bu, 0x7975914au,
              0xfc63de4fu, 0xcb091c4eu, 0x92b75a4cu, 0xa5dd984du, 0x989ac446u,
              0xaff00647u, 0xf64e4045u, 0xc1248244u, 0x4432cd41u, 0x73580f40u,
              0x2ae64942u, 0x1d8c8b43u, 0x5068f154u, 0x67023355u, 0x3ebc7557u,
              0x09d6b756u, 0x8cc0f853u, 0xbbaa3a52u, 0xe2147c50u, 0xd57ebe51u,
              0xe839e25au, 0xdf53205bu, 0x86ed6659u, 0xb187a458u, 0x3491eb5du,
              0x03fb295cu, 0x5a456f5eu, 0x6d2fad5fu, 0x801b35e1u, 0xb771f7e0u,
              0xeecfb1e2u, 0xd9a573e3u, 0x5cb33ce6u, 0x6bd9fee7u, 0x3267b8e5u,
              0x050d7ae4u, 0x384a26efu, 0x0f20e4eeu, 0x569ea2ecu, 0x61f460edu,
              0xe4e22fe8u, 0xd388ede9u, 0x8a36abebu, 0xbd5c69eau, 0xf0b813fdu,
              0xc7d2d1fcu, 0x9e6c97feu, 0xa90655ffu, 0x2c101afau, 0x1b7ad8fbu,
              0x42c49ef9u, 0x75ae5cf8u, 0x48e900f3u, 0x7f83c2f2u, 0x263d84f0u,
              0x115746f1u, 0x944109f4u, 0xa32bcbf5u, 0xfa958df7u, 0xcdff4ff6u,
              0x605d78d9u, 0x5737bad8u, 0x0e89fcdau, 0x39e33edbu, 0xbcf571deu,
              0x8b9fb3dfu, 0xd221f5ddu, 0xe54b37dcu, 0xd80c6bd7u, 0xef66a9d6u,
              0xb6d8efd4u, 0x81b22dd5u, 0x04a462d0u, 0x33cea0d1u, 0x6a70e6d3u,
              0x5d1a24d2u, 0x10fe5ec5u, 0x27949cc4u, 0x7e2adac6u, 0x494018c7u,
              0xcc5657c2u, 0xfb3c95c3u, 0xa282d3c1u, 0x95e811c0u, 0xa8af4dcbu,
              0x9fc58fcau, 0xc67bc9c8u, 0xf1110bc9u, 0x740744ccu, 0x436d86cdu,
              0x1ad3c0cfu, 0x2db902ceu, 0x4096af91u, 0x77fc6d90u, 0x2e422b92u,
              0x1928e993u, 0x9c3ea696u, 0xab546497u, 0xf2ea2295u, 0xc580e094u,
              0xf8c7bc9fu, 0xcfad7e9eu, 0x9613389cu, 0xa179fa9du, 0x246fb598u,
              0x13057799u, 0x4abb319bu, 0x7dd1f39au, 0x3035898du, 0x075f4b8cu,
              0x5ee10d8eu, 0x698bcf8fu, 0xec9d808au, 0xdbf7428bu, 0x82490489u,
              0xb523c688u, 0x88649a83u, 0xbf0e5882u, 0xe6b01e80u, 0xd1dadc81u,
              0x54cc9384u, 0x63a65185u, 0x3a181787u, 0x0d72d586u, 0xa0d0e2a9u,
              0x97ba20a8u, 0xce0466aau, 0xf96ea4abu, 0x7c78ebaeu, 0x4b1229afu,
              0x12ac6fadu, 0x25c6adacu, 0x1881f1a7u, 0x2feb33a6u, 0x765575a4u,
              0x413fb7a5u, 0xc429f8a0u, 0xf3433aa1u, 0xaafd7ca3u, 0x9d97bea2u,
              0xd073c4b5u, 0xe71906b4u, 0xbea740b6u, 0x89cd82b7u, 0x0cdbcdb2u,
              0x3bb10fb3u, 0x620f49b1u, 0x55658bb0u, 0x6822d7bbu, 0x5f4815bau,
              0x06f653b8u, 0x319c91b9u, 0xb48adebcu, 0x83e01cbdu, 0xda5e5abfu,
              0xed3498beu
          },
          new [] {
              0x00000000u, 0x6567bcb8u, 0x8bc809aau, 0xeeafb512u, 0x5797628fu,
              0x32f0de37u, 0xdc5f6b25u, 0xb938d79du, 0xef28b4c5u, 0x8a4f087du,
              0x64e0bd6fu, 0x018701d7u, 0xb8bfd64au, 0xddd86af2u, 0x3377dfe0u,
              0x56106358u, 0x9f571950u, 0xfa30a5e8u, 0x149f10fau, 0x71f8ac42u,
              0xc8c07bdfu, 0xada7c767u, 0x43087275u, 0x266fcecdu, 0x707fad95u,
              0x1518112du, 0xfbb7a43fu, 0x9ed01887u, 0x27e8cf1au, 0x428f73a2u,
              0xac20c6b0u, 0xc9477a08u, 0x3eaf32a0u, 0x5bc88e18u, 0xb5673b0au,
              0xd00087b2u, 0x6938502fu, 0x0c5fec97u, 0xe2f05985u, 0x8797e53du,
              0xd1878665u, 0xb4e03addu, 0x5a4f8fcfu, 0x3f283377u, 0x8610e4eau,
              0xe3775852u, 0x0dd8ed40u, 0x68bf51f8u, 0xa1f82bf0u, 0xc49f9748u,
              0x2a30225au, 0x4f579ee2u, 0xf66f497fu, 0x9308f5c7u, 0x7da740d5u,
              0x18c0fc6du, 0x4ed09f35u, 0x2bb7238du, 0xc518969fu, 0xa07f2a27u,
              0x1947fdbau, 0x7c204102u, 0x928ff410u, 0xf7e848a8u, 0x3d58149bu,
              0x583fa823u, 0xb6901d31u, 0xd3f7a189u, 0x6acf7614u, 0x0fa8caacu,
              0xe1077fbeu, 0x8460c306u, 0xd270a05eu, 0xb7171ce6u, 0x59b8a9f4u,
              0x3cdf154cu, 0x85e7c2d1u, 0xe0807e69u, 0x0e2fcb7bu, 0x6b4877c3u,
              0xa20f0dcbu, 0xc768b173u, 0x29c70461u, 0x4ca0b8d9u, 0xf5986f44u,
              0x90ffd3fcu, 0x7e5066eeu, 0x1b37da56u, 0x4d27b90eu, 0x284005b6u,
              0xc6efb0a4u, 0xa3880c1cu, 0x1ab0db81u, 0x7fd76739u, 0x9178d22bu,
              0xf41f6e93u, 0x03f7263bu, 0x66909a83u, 0x883f2f91u, 0xed589329u,
              0x546044b4u, 0x3107f80cu, 0xdfa84d1eu, 0xbacff1a6u, 0xecdf92feu,
              0x89b82e46u, 0x67179b54u, 0x027027ecu, 0xbb48f071u, 0xde2f4cc9u,
              0x3080f9dbu, 0x55e74563u, 0x9ca03f6bu, 0xf9c783d3u, 0x176836c1u,
              0x720f8a79u, 0xcb375de4u, 0xae50e15cu, 0x40ff544eu, 0x2598e8f6u,
              0x73888baeu, 0x16ef3716u, 0xf8408204u, 0x9d273ebcu, 0x241fe921u,
              0x41785599u, 0xafd7e08bu, 0xcab05c33u, 0x3bb659edu, 0x5ed1e555u,
              0xb07e5047u, 0xd519ecffu, 0x6c213b62u, 0x094687dau, 0xe7e932c8u,
              0x828e8e70u, 0xd49eed28u, 0xb1f95190u, 0x5f56e482u, 0x3a31583au,
              0x83098fa7u, 0xe66e331fu, 0x08c1860du, 0x6da63ab5u, 0xa4e140bdu,
              0xc186fc05u, 0x2f294917u, 0x4a4ef5afu, 0xf3762232u, 0x96119e8au,
              0x78be2b98u, 0x1dd99720u, 0x4bc9f478u, 0x2eae48c0u, 0xc001fdd2u,
              0xa566416au, 0x1c5e96f7u, 0x79392a4fu, 0x97969f5du, 0xf2f123e5u,
              0x05196b4du, 0x607ed7f5u, 0x8ed162e7u, 0xebb6de5fu, 0x528e09c2u,
              0x37e9b57au, 0xd9460068u, 0xbc21bcd0u, 0xea31df88u, 0x8f566330u,
              0x61f9d622u, 0x049e6a9au, 0xbda6bd07u, 0xd8c101bfu, 0x366eb4adu,
              0x53090815u, 0x9a4e721du, 0xff29cea5u, 0x11867bb7u, 0x74e1c70fu,
              0xcdd91092u, 0xa8beac2au, 0x46111938u, 0x2376a580u, 0x7566c6d8u,
              0x10017a60u, 0xfeaecf72u, 0x9bc973cau, 0x22f1a457u, 0x479618efu,
              0xa939adfdu, 0xcc5e1145u, 0x06ee4d76u, 0x6389f1ceu, 0x8d2644dcu,
              0xe841f864u, 0x51792ff9u, 0x341e9341u, 0xdab12653u, 0xbfd69aebu,
              0xe9c6f9b3u, 0x8ca1450bu, 0x620ef019u, 0x07694ca1u, 0xbe519b3cu,
              0xdb362784u, 0x35999296u, 0x50fe2e2eu, 0x99b95426u, 0xfcdee89eu,
              0x12715d8cu, 0x7716e134u, 0xce2e36a9u, 0xab498a11u, 0x45e63f03u,
              0x208183bbu, 0x7691e0e3u, 0x13f65c5bu, 0xfd59e949u, 0x983e55f1u,
              0x2106826cu, 0x44613ed4u, 0xaace8bc6u, 0xcfa9377eu, 0x38417fd6u,
              0x5d26c36eu, 0xb389767cu, 0xd6eecac4u, 0x6fd61d59u, 0x0ab1a1e1u,
              0xe41e14f3u, 0x8179a84bu, 0xd769cb13u, 0xb20e77abu, 0x5ca1c2b9u,
              0x39c67e01u, 0x80fea99cu, 0xe5991524u, 0x0b36a036u, 0x6e511c8eu,
              0xa7166686u, 0xc271da3eu, 0x2cde6f2cu, 0x49b9d394u, 0xf0810409u,
              0x95e6b8b1u, 0x7b490da3u, 0x1e2eb11bu, 0x483ed243u, 0x2d596efbu,
              0xc3f6dbe9u, 0xa6916751u, 0x1fa9b0ccu, 0x7ace0c74u, 0x9461b966u,
              0xf10605deu
            }
        };

        #endregion

        public static int crc32(int crc, ReadOnlySpan<byte> buf)
        {
            if (buf == null)
                return (int)0u;

            if (Environment.Is64BitProcess)
            {
                if (BitConverter.IsLittleEndian)
                    return crc32_little(crc, buf);
                else
                    return crc32_big(crc, buf);
            }

            var table = crc_table[0];
            crc = (int)(crc ^ 0xffffffffu);
            while (buf.Length >= 8)
            {
                crc = (int)(table[(crc ^ (buf[0])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[1])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[2])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[3])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[4])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[5])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[6])) & 0xff] ^ (crc >> 8));
                crc = (int)(table[(crc ^ (buf[7])) & 0xff] ^ (crc >> 8));
                buf = buf.Slice(8);
            }
            for (int i = 0; i < buf.Length; i++)
            {
                crc = (int)(table[(crc ^ buf[i]) & 0xff] ^ (crc >> 8));
            }
            return (int)(crc ^ 0xffffffffu);
        }

        public static int crc32_little(int crc, ReadOnlySpan<byte> buf)
        {
            uint c = (uint)crc;
            c = ~c;
            var table0 = crc_table[0];
            fixed (byte* ptr = buf)
            {
                while ((buf.Length != 0) && (((long)ptr & 3) != 0))
                {
                    c = table0[(c ^ buf[0]) & 0xff] ^ (c >> 8);
                    buf = buf.Slice(1);
                }
            }
            var table1 = crc_table[1];
            var table2 = crc_table[2];
            var table3 = crc_table[3];
            var buf4 = MemoryMarshal.Cast<byte, uint>(buf);
            while (buf4.Length >= 8)
            {
                c ^= buf4[0];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[1];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[2];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[3];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[4];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[5];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[6];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];
                c ^= buf4[7];
                c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ crc_table[1][(c >> 16) & 0xff] ^ table0[c >> 24];

                buf4 = buf4.Slice(8);
                buf = buf.Slice(8 * sizeof(uint));
            }

            for (int i = 0; i < buf4.Length; i++)
            {
                c ^= buf4[i];
                c = table3[c & 0xff] ^ table2[(c >> 8) & 0xff] ^ table1[(c >> 16) & 0xff] ^ table0[c >> 24];
            }
            buf = buf.Slice(buf4.Length * sizeof(uint));

            for (int i = 0; i < buf.Length; i++)
            {
                c = table0[(c ^ buf[i]) & 0xff] ^ (c >> 8);
            }
            c = ~c;
            return (int)c;
        }

        public static int crc32_big(int crc, ReadOnlySpan<byte> buf)
        {
            uint c = ((((uint)crc) >> 24) & 255) + ((((uint)crc) >> 8) & 65280) + ((((uint)crc) & 65280) << 8) + ((((uint)crc) & 255) << 24);
            c = ~c;
            var table4 = crc_table[4];
            fixed (byte* ptr = buf)
            {
                while ((buf.Length != 0) && (((long)ptr & 3) != 0))
                {
                    c = table4[(c >> 24) ^ buf[0]] ^ (c << 8);
                    buf = buf.Slice(1);
                }
            }

            var table5 = crc_table[5];
            var table6 = crc_table[6];
            var table7 = crc_table[7];
            var buf4 = MemoryMarshal.Cast<byte, uint>(buf);
            while (buf4.Length >= 8)
            {
                c ^= buf4[0];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[1];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[2];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[3];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[4];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[5];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[6];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
                c ^= buf4[7];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];

                buf4 = buf4.Slice(8);
                buf = buf.Slice(8 * sizeof(uint));
            }
            for (int i = 0; i < buf4.Length; i++)
            {
                c ^= buf4[i];
                c = table4[c & 0xff] ^ table5[(c >> 8) & 0xff] ^ table6[(c >> 16) & 0xff] ^ table7[c >> 24];
            }
            buf = buf.Slice(buf4.Length * sizeof(uint));

            for (int i = 0; i < buf.Length; i++)
            {
                c = table4[(c >> 24) ^ buf[i]] ^ (c << 8);
            }
            c = ~c;
            return (int)((((c) >> 24) & 255) + (((c) >> 8) & 65280) + (((c) & 65280) << 8) + (((c) & 255) << 24));
        }

        public static int gf2_matrix_times(int* mat, int vec)
        {
            int sum = 0;
            sum = 0;
            while (vec != 0)
            {
                if ((vec & 1) != 0)
                    sum ^= *mat;
                vec >>= 1;
                mat++;
            }
            return sum;
        }

        public static void gf2_matrix_square(int* square, int* mat)
        {
            int n = 0;
            for (n = 0; n < 32; n++)
            {
                square[n] = gf2_matrix_times(mat, mat[n]);
            }
        }

        public static int crc32_combine_(int crc1, int crc2, long len2)
        {
            int n = 0;
            int row = 0;
            int* even = stackalloc int[32];
            int* odd = stackalloc int[32];
            if (len2 <= 0)
                return crc1;
            odd[0] = unchecked((int)0xedb88320u);
            row = 1;
            for (n = 1; n < 32; n++)
            {
                odd[n] = row;
                row <<= 1;
            }
            gf2_matrix_square(even, odd);
            gf2_matrix_square(odd, even);
            do
            {
                gf2_matrix_square(even, odd);
                if ((len2 & 1) != 0)
                    crc1 = gf2_matrix_times(even, crc1);
                len2 >>= 1;
                if (len2 == 0)
                    break;
                gf2_matrix_square(odd, even);
                if ((len2 & 1) != 0)
                    crc1 = gf2_matrix_times(odd, crc1);
                len2 >>= 1;
            }
            while (len2 != 0);
            crc1 ^= crc2;
            return crc1;
        }

        public static int crc32_combine(int crc1, int crc2, int len2)
        {
            return crc32_combine_(crc1, crc2, len2);
        }

        public static int crc32_combine64(int crc1, int crc2, long len2)
        {
            return crc32_combine_(crc1, crc2, len2);
        }
    }
}