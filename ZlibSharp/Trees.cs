// Generated by Sichem at 2020-09-30 18:30:55

using System;
using System.Runtime.InteropServices;
using static ZlibSharp.ZUtil;

namespace ZlibSharp
{
    public unsafe class Trees
    {
        public static ct_data_s[] static_ltree = new ct_data_s[Deflate.L_CODES + 2] {
            new ct_data_s( 12,  8), new ct_data_s(140,  8), new ct_data_s( 76,  8), new ct_data_s(204,  8), new ct_data_s( 44,  8),
            new ct_data_s(172,  8), new ct_data_s(108,  8), new ct_data_s(236,  8), new ct_data_s( 28,  8), new ct_data_s(156,  8),
            new ct_data_s( 92,  8), new ct_data_s(220,  8), new ct_data_s( 60,  8), new ct_data_s(188,  8), new ct_data_s(124,  8),
            new ct_data_s(252,  8), new ct_data_s(  2,  8), new ct_data_s(130,  8), new ct_data_s( 66,  8), new ct_data_s(194,  8),
            new ct_data_s( 34,  8), new ct_data_s(162,  8), new ct_data_s( 98,  8), new ct_data_s(226,  8), new ct_data_s( 18,  8),
            new ct_data_s(146,  8), new ct_data_s( 82,  8), new ct_data_s(210,  8), new ct_data_s( 50,  8), new ct_data_s(178,  8),
            new ct_data_s(114,  8), new ct_data_s(242,  8), new ct_data_s( 10,  8), new ct_data_s(138,  8), new ct_data_s( 74,  8),
            new ct_data_s(202,  8), new ct_data_s( 42,  8), new ct_data_s(170,  8), new ct_data_s(106,  8), new ct_data_s(234,  8),
            new ct_data_s( 26,  8), new ct_data_s(154,  8), new ct_data_s( 90,  8), new ct_data_s(218,  8), new ct_data_s( 58,  8),
            new ct_data_s(186,  8), new ct_data_s(122,  8), new ct_data_s(250,  8), new ct_data_s(  6,  8), new ct_data_s(134,  8),
            new ct_data_s( 70,  8), new ct_data_s(198,  8), new ct_data_s( 38,  8), new ct_data_s(166,  8), new ct_data_s(102,  8),
            new ct_data_s(230,  8), new ct_data_s( 22,  8), new ct_data_s(150,  8), new ct_data_s( 86,  8), new ct_data_s(214,  8),
            new ct_data_s( 54,  8), new ct_data_s(182,  8), new ct_data_s(118,  8), new ct_data_s(246,  8), new ct_data_s( 14,  8),
            new ct_data_s(142,  8), new ct_data_s( 78,  8), new ct_data_s(206,  8), new ct_data_s( 46,  8), new ct_data_s(174,  8),
            new ct_data_s(110,  8), new ct_data_s(238,  8), new ct_data_s( 30,  8), new ct_data_s(158,  8), new ct_data_s( 94,  8),
            new ct_data_s(222,  8), new ct_data_s( 62,  8), new ct_data_s(190,  8), new ct_data_s(126,  8), new ct_data_s(254,  8),
            new ct_data_s(  1,  8), new ct_data_s(129,  8), new ct_data_s( 65,  8), new ct_data_s(193,  8), new ct_data_s( 33,  8),
            new ct_data_s(161,  8), new ct_data_s( 97,  8), new ct_data_s(225,  8), new ct_data_s( 17,  8), new ct_data_s(145,  8),
            new ct_data_s( 81,  8), new ct_data_s(209,  8), new ct_data_s( 49,  8), new ct_data_s(177,  8), new ct_data_s(113,  8),
            new ct_data_s(241,  8), new ct_data_s(  9,  8), new ct_data_s(137,  8), new ct_data_s( 73,  8), new ct_data_s(201,  8),
            new ct_data_s( 41,  8), new ct_data_s(169,  8), new ct_data_s(105,  8), new ct_data_s(233,  8), new ct_data_s( 25,  8),
            new ct_data_s(153,  8), new ct_data_s( 89,  8), new ct_data_s(217,  8), new ct_data_s( 57,  8), new ct_data_s(185,  8),
            new ct_data_s(121,  8), new ct_data_s(249,  8), new ct_data_s(  5,  8), new ct_data_s(133,  8), new ct_data_s( 69,  8),
            new ct_data_s(197,  8), new ct_data_s( 37,  8), new ct_data_s(165,  8), new ct_data_s(101,  8), new ct_data_s(229,  8),
            new ct_data_s( 21,  8), new ct_data_s(149,  8), new ct_data_s( 85,  8), new ct_data_s(213,  8), new ct_data_s( 53,  8),
            new ct_data_s(181,  8), new ct_data_s(117,  8), new ct_data_s(245,  8), new ct_data_s( 13,  8), new ct_data_s(141,  8),
            new ct_data_s( 77,  8), new ct_data_s(205,  8), new ct_data_s( 45,  8), new ct_data_s(173,  8), new ct_data_s(109,  8),
            new ct_data_s(237,  8), new ct_data_s( 29,  8), new ct_data_s(157,  8), new ct_data_s( 93,  8), new ct_data_s(221,  8),
            new ct_data_s( 61,  8), new ct_data_s(189,  8), new ct_data_s(125,  8), new ct_data_s(253,  8), new ct_data_s( 19,  9),
            new ct_data_s(275,  9), new ct_data_s(147,  9), new ct_data_s(403,  9), new ct_data_s( 83,  9), new ct_data_s(339,  9),
            new ct_data_s(211,  9), new ct_data_s(467,  9), new ct_data_s( 51,  9), new ct_data_s(307,  9), new ct_data_s(179,  9),
            new ct_data_s(435,  9), new ct_data_s(115,  9), new ct_data_s(371,  9), new ct_data_s(243,  9), new ct_data_s(499,  9),
            new ct_data_s( 11,  9), new ct_data_s(267,  9), new ct_data_s(139,  9), new ct_data_s(395,  9), new ct_data_s( 75,  9),
            new ct_data_s(331,  9), new ct_data_s(203,  9), new ct_data_s(459,  9), new ct_data_s( 43,  9), new ct_data_s(299,  9),
            new ct_data_s(171,  9), new ct_data_s(427,  9), new ct_data_s(107,  9), new ct_data_s(363,  9), new ct_data_s(235,  9),
            new ct_data_s(491,  9), new ct_data_s( 27,  9), new ct_data_s(283,  9), new ct_data_s(155,  9), new ct_data_s(411,  9),
            new ct_data_s( 91,  9), new ct_data_s(347,  9), new ct_data_s(219,  9), new ct_data_s(475,  9), new ct_data_s( 59,  9),
            new ct_data_s(315,  9), new ct_data_s(187,  9), new ct_data_s(443,  9), new ct_data_s(123,  9), new ct_data_s(379,  9),
            new ct_data_s(251,  9), new ct_data_s(507,  9), new ct_data_s(  7,  9), new ct_data_s(263,  9), new ct_data_s(135,  9),
            new ct_data_s(391,  9), new ct_data_s( 71,  9), new ct_data_s(327,  9), new ct_data_s(199,  9), new ct_data_s(455,  9),
            new ct_data_s( 39,  9), new ct_data_s(295,  9), new ct_data_s(167,  9), new ct_data_s(423,  9), new ct_data_s(103,  9),
            new ct_data_s(359,  9), new ct_data_s(231,  9), new ct_data_s(487,  9), new ct_data_s( 23,  9), new ct_data_s(279,  9),
            new ct_data_s(151,  9), new ct_data_s(407,  9), new ct_data_s( 87,  9), new ct_data_s(343,  9), new ct_data_s(215,  9),
            new ct_data_s(471,  9), new ct_data_s( 55,  9), new ct_data_s(311,  9), new ct_data_s(183,  9), new ct_data_s(439,  9),
            new ct_data_s(119,  9), new ct_data_s(375,  9), new ct_data_s(247,  9), new ct_data_s(503,  9), new ct_data_s( 15,  9),
            new ct_data_s(271,  9), new ct_data_s(143,  9), new ct_data_s(399,  9), new ct_data_s( 79,  9), new ct_data_s(335,  9),
            new ct_data_s(207,  9), new ct_data_s(463,  9), new ct_data_s( 47,  9), new ct_data_s(303,  9), new ct_data_s(175,  9),
            new ct_data_s(431,  9), new ct_data_s(111,  9), new ct_data_s(367,  9), new ct_data_s(239,  9), new ct_data_s(495,  9),
            new ct_data_s( 31,  9), new ct_data_s(287,  9), new ct_data_s(159,  9), new ct_data_s(415,  9), new ct_data_s( 95,  9),
            new ct_data_s(351,  9), new ct_data_s(223,  9), new ct_data_s(479,  9), new ct_data_s( 63,  9), new ct_data_s(319,  9),
            new ct_data_s(191,  9), new ct_data_s(447,  9), new ct_data_s(127,  9), new ct_data_s(383,  9), new ct_data_s(255,  9),
            new ct_data_s(511,  9), new ct_data_s(  0,  7), new ct_data_s( 64,  7), new ct_data_s( 32,  7), new ct_data_s( 96,  7),
            new ct_data_s( 16,  7), new ct_data_s( 80,  7), new ct_data_s( 48,  7), new ct_data_s(112,  7), new ct_data_s(  8,  7),
            new ct_data_s( 72,  7), new ct_data_s( 40,  7), new ct_data_s(104,  7), new ct_data_s( 24,  7), new ct_data_s( 88,  7),
            new ct_data_s( 56,  7), new ct_data_s(120,  7), new ct_data_s(  4,  7), new ct_data_s( 68,  7), new ct_data_s( 36,  7),
            new ct_data_s(100,  7), new ct_data_s( 20,  7), new ct_data_s( 84,  7), new ct_data_s( 52,  7), new ct_data_s(116,  7),
            new ct_data_s(  3,  8), new ct_data_s(131,  8), new ct_data_s( 67,  8), new ct_data_s(195,  8), new ct_data_s( 35,  8),
            new ct_data_s(163,  8), new ct_data_s( 99,  8), new ct_data_s(227,  8)
        };

        public static ct_data_s[] static_dtree = new ct_data_s[Deflate.D_CODES] {
            new ct_data_s( 0, 5), new ct_data_s(16, 5), new ct_data_s( 8, 5), new ct_data_s(24, 5), new ct_data_s( 4, 5),
            new ct_data_s(20, 5), new ct_data_s(12, 5), new ct_data_s(28, 5), new ct_data_s( 2, 5), new ct_data_s(18, 5),
            new ct_data_s(10, 5), new ct_data_s(26, 5), new ct_data_s( 6, 5), new ct_data_s(22, 5), new ct_data_s(14, 5),
            new ct_data_s(30, 5), new ct_data_s( 1, 5), new ct_data_s(17, 5), new ct_data_s( 9, 5), new ct_data_s(25, 5),
            new ct_data_s( 5, 5), new ct_data_s(21, 5), new ct_data_s(13, 5), new ct_data_s(29, 5), new ct_data_s( 3, 5),
            new ct_data_s(19, 5), new ct_data_s(11, 5), new ct_data_s(27, 5), new ct_data_s( 7, 5), new ct_data_s(23, 5)
        };

        public static byte[] _length_code = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 };
        public static byte[] _dist_code = { 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 };
        public static int[] extra_lbits = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 };
        public static int[] extra_dbits = { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 };
        public static int[] extra_blbits = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 };
        public static byte[] bl_order = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };
        public static int[] base_length = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 };
        public static int[] base_dist = { 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576 };
        public static static_tree_desc_s static_l_desc = new static_tree_desc_s(static_ltree, extra_lbits, 256 + 1, 256 + 1 + 29, 15);
        public static static_tree_desc_s static_d_desc = new static_tree_desc_s(static_dtree, extra_dbits, 0, 30, 15);
        public static static_tree_desc_s static_bl_desc = new static_tree_desc_s(null, extra_blbits, 0, 19, 7);

        public static void tr_static_init()
        {
        }

        public static void _tr_init(internal_state s)
        {
            tr_static_init();
            s.l_desc.dyn_tree = s.dyn_ltree;
            s.l_desc.stat_desc = static_l_desc;
            s.d_desc.dyn_tree = s.dyn_dtree;
            s.d_desc.stat_desc = static_d_desc;
            s.bl_desc.dyn_tree = s.bl_tree;
            s.bl_desc.stat_desc = static_bl_desc;
            s.bi_buf = 0;
            s.bi_valid = 0;
            init_block(s);
        }

        public static void init_block(internal_state s)
        {
            int n = 0;
            for (n = 0; n < (256 + 1 + 29); n++)
            { s.dyn_ltree[n].fc.freq = 0; }
            for (n = 0; n < 30; n++)
            { s.dyn_dtree[n].fc.freq = 0; }
            for (n = 0; n < 19; n++)
            { s.bl_tree[n].fc.freq = 0; }
            s.dyn_ltree[256].fc.freq = 1;
            s.opt_len = s.static_len = (int)0L;
            s.last_lit = s.matches = 0;
        }

        public static void pqdownheap(internal_state s, ct_data_s[] tree, int k)
        {
            int v = s.heap[k];
            int j = k << 1;
            while (j <= s.heap_len)
            {
                if ((j < s.heap_len) && ((tree[s.heap[j + 1]].fc.freq < tree[s.heap[j]].fc.freq) || ((tree[s.heap[j + 1]].fc.freq == tree[s.heap[j]].fc.freq) && (s.depth[s.heap[j + 1]] <= s.depth[s.heap[j]]))))
                {
                    j++;
                }
                if ((tree[v].fc.freq < tree[s.heap[j]].fc.freq) || ((tree[v].fc.freq == tree[s.heap[j]].fc.freq) && (s.depth[v] <= s.depth[s.heap[j]])))
                    break;
                s.heap[k] = s.heap[j];
                k = j;
                j <<= 1;
            }
            s.heap[k] = v;
        }

        public static void gen_bitlen(internal_state s, ref tree_desc_s desc)
        {
            ct_data_s[] tree = desc.dyn_tree;
            int max_code = desc.max_code;
            ct_data_s[] stree = desc.stat_desc.static_tree;
            int[] extra = desc.stat_desc.extra_bits;
            int _base_ = desc.stat_desc.extra_base;
            int max_length = desc.stat_desc.max_length;
            int h = 0;
            int n = 0;
            int m = 0;
            int bits = 0;
            int xbits = 0;
            ushort f = 0;
            int overflow = 0;
            for (bits = 0; bits <= 15; bits++)
            { s.bl_count[bits] = 0; }
            tree[s.heap[s.heap_max]].dl.len = 0;
            for (h = s.heap_max + 1; h < (2 * (256 + 1 + 29) + 1); h++)
            {
                n = s.heap[h];
                bits = tree[tree[n].dl.dad].dl.len + 1;
                if (bits > max_length)
                {
                    bits = max_length;
                    overflow++;
                }
                tree[n].dl.len = (ushort)bits;
                if (n > max_code)
                    continue;
                s.bl_count[bits]++;
                xbits = 0;
                if (n >= _base_)
                    xbits = extra[n - _base_];
                f = tree[n].fc.freq;
                s.opt_len += (int)((int)f * (uint)(bits + xbits));
                if (stree != null)
                    s.static_len += (int)((int)f * (uint)(stree[n].dl.len + xbits));
            }
            if (overflow == 0)
                return;
            do
            {
                bits = max_length - 1;
                while (s.bl_count[bits] == 0)
                { bits--; }
                s.bl_count[bits]--;
                s.bl_count[bits + 1] += 2;
                s.bl_count[max_length]--;
                overflow -= 2;
            }
            while (overflow > 0);
            for (bits = max_length; bits != 0; bits--)
            {
                n = s.bl_count[bits];
                while (n != 0)
                {
                    m = s.heap[--h];
                    if (m > max_code)
                        continue;
                    if (tree[m].dl.len != (uint)bits)
                    {
                        s.opt_len += (bits - tree[m].dl.len) * tree[m].fc.freq;
                        tree[m].dl.len = (ushort)bits;
                    }
                    n--;
                }
            }
        }

        public static void gen_codes(ct_data_s[] tree, int max_code, ushort[] bl_count)
        {
            ushort* next_code = stackalloc ushort[15 + 1];
            uint code = 0;
            int bits = 0;
            int n = 0;
            for (bits = 1; bits <= 15; bits++)
            {
                code = (code + bl_count[bits - 1]) << 1;
                next_code[bits] = (ushort)code;
            }
            for (n = 0; n <= max_code; n++)
            {
                int len = tree[n].dl.len;
                if (len == 0)
                    continue;
                tree[n].fc.code = (ushort)bi_reverse(next_code[len]++, len);
            }
        }

        public static void build_tree(internal_state s, ref tree_desc_s desc)
        {
            ct_data_s[] tree = desc.dyn_tree;
            ct_data_s[] stree = desc.stat_desc.static_tree;
            int elems = desc.stat_desc.elems;
            int n = 0;
            int m = 0;
            int max_code = -1;
            int node = 0;
            s.heap_len = 0;
            s.heap_max = 2 * (256 + 1 + 29) + 1;
            for (n = 0; n < elems; n++)
            {
                if (tree[n].fc.freq != 0)
                {
                    s.heap[++s.heap_len] = max_code = n;
                    s.depth[n] = 0;
                }
                else
                {
                    tree[n].dl.len = 0;
                }
            }
            while (s.heap_len < 2)
            {
                node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
                tree[node].fc.freq = 1;
                s.depth[node] = 0;
                s.opt_len--;
                if (stree != null)
                    s.static_len -= stree[node].dl.len;
            }
            desc.max_code = max_code;
            for (n = s.heap_len / 2; n >= 1; n--)
            { pqdownheap(s, tree, n); }
            node = elems;
            do
            {
                {
                    n = s.heap[1];
                    s.heap[1] = s.heap[s.heap_len--];
                    pqdownheap(s, tree, 1);
                }
                m = s.heap[1];
                s.heap[--s.heap_max] = n;
                s.heap[--s.heap_max] = m;
                tree[node].fc.freq = (ushort)(tree[n].fc.freq + tree[m].fc.freq);
                s.depth[node] = (byte)((s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1);
                tree[n].dl.dad = tree[m].dl.dad = (ushort)node;
                s.heap[1] = node++;
                pqdownheap(s, tree, 1);
            }
            while (s.heap_len >= 2);
            s.heap[--s.heap_max] = s.heap[1];
            gen_bitlen(s, ref desc);
            gen_codes(tree, max_code, s.bl_count);
        }

        public static void scan_tree(internal_state s, ct_data_s[] tree, int max_code)
        {
            int n = 0;
            int prevlen = -1;
            int curlen = 0;
            int nextlen = tree[0].dl.len;
            int count = 0;
            int max_count = 7;
            int min_count = 4;
            if (nextlen == 0)
            {
                max_count = 138;
                min_count = 3;
            }
            tree[max_code + 1].dl.len = 0xffff;
            for (n = 0; n <= max_code; n++)
            {
                curlen = nextlen;
                nextlen = tree[n + 1].dl.len;
                if (((++count) < max_count) && (curlen == nextlen))
                {
                    continue;
                }
                else if (count < min_count)
                {
                    s.bl_tree[curlen].fc.freq += (ushort)count;
                }
                else if (curlen != 0)
                {
                    if (curlen != prevlen)
                        s.bl_tree[curlen].fc.freq++;
                    s.bl_tree[16].fc.freq++;
                }
                else if (count <= 10)
                {
                    s.bl_tree[17].fc.freq++;
                }
                else
                {
                    s.bl_tree[18].fc.freq++;
                }
                count = 0;
                prevlen = curlen;
                if (nextlen == 0)
                {
                    max_count = 138;
                    min_count = 3;
                }
                else if (curlen == nextlen)
                {
                    max_count = 6;
                    min_count = 3;
                }
                else
                {
                    max_count = 7;
                    min_count = 4;
                }
            }
        }

        public static void send_tree(internal_state s, ct_data_s[] tree, int max_code)
        {
            int n = 0;
            int prevlen = -1;
            int curlen = 0;
            int nextlen = tree[0].dl.len;
            int count = 0;
            int max_count = 7;
            int min_count = 4;
            if (nextlen == 0)
            {
                max_count = 138;
                min_count = 3;
            }
            for (n = 0; n <= max_code; n++)
            {
                curlen = nextlen;
                nextlen = tree[n + 1].dl.len;
                if (((++count) < max_count) && (curlen == nextlen))
                {
                    continue;
                }
                else if (count < min_count)
                {
                    do
                    {
                        {
                            int len = s.bl_tree[curlen].dl.len;
                            if (s.bi_valid > (16 - len))
                            {
                                int val = s.bl_tree[curlen].fc.code;
                                s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                {
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                    }
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                    }
                                }
                                s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                s.bi_valid += len - 16;
                            }
                            else
                            {
                                s.bi_buf |= (ushort)((s.bl_tree[curlen].fc.code) << s.bi_valid);
                                s.bi_valid += len;
                            }
                        }
                    }
                    while (--count != 0);
                }
                else if (curlen != 0)
                {
                    if (curlen != prevlen)
                    {
                        {
                            int len = s.bl_tree[curlen].dl.len;
                            if (s.bi_valid > (16 - len))
                            {
                                int val = s.bl_tree[curlen].fc.code;
                                s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                {
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                    }
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                    }
                                }
                                s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                s.bi_valid += len - 16;
                            }
                            else
                            {
                                s.bi_buf |= (ushort)((s.bl_tree[curlen].fc.code) << s.bi_valid);
                                s.bi_valid += len;
                            }
                        }
                        count--;
                    }
                    {
                        int len = s.bl_tree[16].dl.len;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = s.bl_tree[16].fc.code;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((s.bl_tree[16].fc.code) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                    {
                        int len = 2;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = count - 3;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((ushort)(count - 3) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                }
                else if (count <= 10)
                {
                    {
                        int len = s.bl_tree[17].dl.len;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = s.bl_tree[17].fc.code;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((s.bl_tree[17].fc.code) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                    {
                        int len = 3;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = count - 3;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((ushort)(count - 3) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                }
                else
                {
                    {
                        int len = s.bl_tree[18].dl.len;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = s.bl_tree[18].fc.code;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((s.bl_tree[18].fc.code) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                    {
                        int len = 7;
                        if (s.bi_valid > (16 - len))
                        {
                            int val = count - 11;
                            s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                            {
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                }
                                {
                                    s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                }
                            }
                            s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                            s.bi_valid += len - 16;
                        }
                        else
                        {
                            s.bi_buf |= (ushort)((ushort)(count - 11) << s.bi_valid);
                            s.bi_valid += len;
                        }
                    }
                }
                count = 0;
                prevlen = curlen;
                if (nextlen == 0)
                {
                    max_count = 138;
                    min_count = 3;
                }
                else if (curlen == nextlen)
                {
                    max_count = 6;
                    min_count = 3;
                }
                else
                {
                    max_count = 7;
                    min_count = 4;
                }
            }
        }

        public static int build_bl_tree(internal_state s)
        {
            int max_blindex = 0;
            scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
            scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
            build_tree(s, ref s.bl_desc);
            for (max_blindex = 19 - 1; max_blindex >= 3; max_blindex--)
            {
                if (s.bl_tree[bl_order[max_blindex]].dl.len != 0)
                    break;
            }
            s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
            return max_blindex;
        }

        public static void send_all_trees(internal_state s, int lcodes, int dcodes, int blcodes)
        {
            int rank = 0;
            {
                int len = 5;
                if (s.bi_valid > (16 - len))
                {
                    int val = lcodes - 257;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((ushort)(lcodes - 257) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            {
                int len = 5;
                if (s.bi_valid > (16 - len))
                {
                    int val = dcodes - 1;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((ushort)(dcodes - 1) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            {
                int len = 4;
                if (s.bi_valid > (16 - len))
                {
                    int val = blcodes - 4;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((ushort)(blcodes - 4) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            for (rank = 0; rank < blcodes; rank++)
            {
                {
                    int len = 3;
                    if (s.bi_valid > (16 - len))
                    {
                        int val = s.bl_tree[bl_order[rank]].dl.len;
                        s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                        {
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                            }
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                            }
                        }
                        s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                        s.bi_valid += len - 16;
                    }
                    else
                    {
                        s.bi_buf |= (ushort)((s.bl_tree[bl_order[rank]].dl.len) << s.bi_valid);
                        s.bi_valid += len;
                    }
                }
            }
            send_tree(s, s.dyn_ltree, lcodes - 1);
            send_tree(s, s.dyn_dtree, dcodes - 1);
        }

        public static void _tr_stored_block(internal_state s, Span<byte> buf, int stored_len, int last)
        {
            {
                int len = 3;
                if (s.bi_valid > (16 - len))
                {
                    int val = (0 << 1) + last;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((ushort)((0 << 1) + last) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            bi_windup(s);
            {
                {
                    s.pending_buf[s.pending++] = (byte)(((ushort)stored_len) & 0xff);
                }
                {
                    s.pending_buf[s.pending++] = (byte)(((ushort)stored_len) >> 8);
                }
            }

            {
                {
                    s.pending_buf[s.pending++] = (byte)(((ushort)~stored_len) & 0xff);
                }
                {
                    s.pending_buf[s.pending++] = (byte)(((ushort)~stored_len) >> 8);
                }
            }

            buf.Slice(0, stored_len).CopyTo(s.pending_buf.AsMemory(s.pending).Span);
            s.pending += stored_len;
        }

        public static void _tr_flush_bits(internal_state s)
        {
            bi_flush(s);
        }

        public static void _tr_align(internal_state s)
        {
            {
                int len = 3;
                if (s.bi_valid > (16 - len))
                {
                    int val = 1 << 1;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)(1 << 1 << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            {
                int len = static_ltree[256].dl.len;
                if (s.bi_valid > (16 - len))
                {
                    int val = static_ltree[256].fc.code;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((static_ltree[256].fc.code) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

            bi_flush(s);
        }

        public static void _tr_flush_block(internal_state s, Span<byte> buf, int stored_len, int last)
        {
            int opt_lenb = 0;
            int static_lenb = 0;
            int max_blindex = 0;
            if (s.level > 0)
            {
                if (s.strm.data_type == 2)
                    s.strm.data_type = detect_data_type(s);
                build_tree(s, ref s.l_desc);
                build_tree(s, ref s.d_desc);
                max_blindex = build_bl_tree(s);
                opt_lenb = (s.opt_len + 3 + 7) >> 3;
                static_lenb = (s.static_len + 3 + 7) >> 3;
                if (static_lenb <= opt_lenb)
                    opt_lenb = static_lenb;
            }
            else
            {
                opt_lenb = static_lenb = stored_len + 5;
            }

            if ((stored_len + 4 <= opt_lenb) && !buf.IsEmpty)
            {
                _tr_stored_block(s, buf, stored_len, last);
            }
            else if ((s.strategy == 4) || (static_lenb == opt_lenb))
            {
                {
                    int len = 3;
                    if (s.bi_valid > (16 - len))
                    {
                        int val = (1 << 1) + last;
                        s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                        {
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                            }
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                            }
                        }
                        s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                        s.bi_valid += len - 16;
                    }
                    else
                    {
                        s.bi_buf |= (ushort)((ushort)((1 << 1) + last) << s.bi_valid);
                        s.bi_valid += len;
                    }
                }
                compress_block(s, static_ltree, static_dtree);
            }
            else
            {
                {
                    int len = 3;
                    if (s.bi_valid > (16 - len))
                    {
                        int val = (2 << 1) + last;
                        s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                        {
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                            }
                            {
                                s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                            }
                        }
                        s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                        s.bi_valid += len - 16;
                    }
                    else
                    {
                        s.bi_buf |= (ushort)((ushort)((2 << 1) + last) << s.bi_valid);
                        s.bi_valid += len;
                    }
                }
                send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                compress_block(s, s.dyn_ltree, s.dyn_dtree);
            }

            init_block(s);
            if (last != 0)
            {
                bi_windup(s);
            }

        }

        public static bool _tr_tally(internal_state s, uint dist, uint lc)
        {
            var d_buf = MemoryMarshal.Cast<byte, ushort>(s.d_buf.Span);
            var l_buf = s.l_buf.Span;
            d_buf[s.last_lit] = (ushort)dist;
            l_buf[s.last_lit++] = (byte)lc;
            if (dist == 0)
            {
                s.dyn_ltree[lc].fc.freq++;
            }
            else
            {
                s.matches++;
                dist--;
                s.dyn_ltree[_length_code[lc] + 256 + 1].fc.freq++;
                s.dyn_dtree[dist < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >> 7)]].fc.freq++;
            }

            return s.last_lit == (s.lit_bufsize - 1);
        }

        public static void compress_block(internal_state s, ct_data_s[] ltree, ct_data_s[] dtree)
        {
            var d_buf = MemoryMarshal.Cast<byte, ushort>(s.d_buf.Span);
            var l_buf = s.l_buf.Span;

            uint dist = 0;
            int lc = 0;
            int lx = 0;
            uint code = 0;
            int extra = 0;
            if (s.last_lit != 0)
                do
                {
                    dist = d_buf[lx];
                    lc = l_buf[lx++];
                    if (dist == 0)
                    {
                        {
                            int len = ltree[lc].dl.len;
                            if (s.bi_valid > (16 - len))
                            {
                                int val = ltree[lc].fc.code;
                                s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                {
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                    }
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                    }
                                }
                                s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                s.bi_valid += len - 16;
                            }
                            else
                            {
                                s.bi_buf |= (ushort)((ltree[lc].fc.code) << s.bi_valid);
                                s.bi_valid += len;
                            }
                        }
                    }
                    else
                    {
                        code = _length_code[lc];
                        {
                            int len = ltree[code + 256 + 1].dl.len;
                            if (s.bi_valid > (16 - len))
                            {
                                int val = ltree[code + 256 + 1].fc.code;
                                s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                {
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                    }
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                    }
                                }
                                s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                s.bi_valid += len - 16;
                            }
                            else
                            {
                                s.bi_buf |= (ushort)((ltree[code + 256 + 1].fc.code) << s.bi_valid);
                                s.bi_valid += len;
                            }
                        }
                        extra = extra_lbits[code];
                        if (extra != 0)
                        {
                            lc -= base_length[code];
                            {
                                int len = extra;
                                if (s.bi_valid > (16 - len))
                                {
                                    int val = lc;
                                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                    {
                                        {
                                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                        }
                                        {
                                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                        }
                                    }
                                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                    s.bi_valid += len - 16;
                                }
                                else
                                {
                                    s.bi_buf |= (ushort)((ushort)lc << s.bi_valid);
                                    s.bi_valid += len;
                                }
                            }
                        }
                        dist--;
                        code = dist < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >> 7)];
                        {
                            int len = dtree[code].dl.len;
                            if (s.bi_valid > (16 - len))
                            {
                                int val = dtree[code].fc.code;
                                s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                {
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                    }
                                    {
                                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                    }
                                }
                                s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                s.bi_valid += len - 16;
                            }
                            else
                            {
                                s.bi_buf |= (ushort)((dtree[code].fc.code) << s.bi_valid);
                                s.bi_valid += len;
                            }
                        }
                        extra = extra_dbits[code];
                        if (extra != 0)
                        {
                            dist -= (uint)base_dist[code];
                            {
                                int len = extra;
                                if (s.bi_valid > (16 - len))
                                {
                                    int val = (int)dist;
                                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                                    {
                                        {
                                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                                        }
                                        {
                                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                                        }
                                    }
                                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                                    s.bi_valid += len - 16;
                                }
                                else
                                {
                                    s.bi_buf |= (ushort)((ushort)dist << s.bi_valid);
                                    s.bi_valid += len;
                                }
                            }
                        }
                    }
                }
                while (lx < s.last_lit);
            {
                int len = ltree[256].dl.len;
                if (s.bi_valid > (16 - len))
                {
                    int val = ltree[256].fc.code;
                    s.bi_buf |= (ushort)((ushort)val << s.bi_valid);
                    {
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                        }
                        {
                            s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                        }
                    }
                    s.bi_buf = (ushort)((ushort)val >> (16 - s.bi_valid));
                    s.bi_valid += len - 16;
                }
                else
                {
                    s.bi_buf |= (ushort)((ltree[256].fc.code) << s.bi_valid);
                    s.bi_valid += len;
                }
            }

        }

        public static int detect_data_type(internal_state s)
        {
            int black_mask = unchecked((int)0xf3ffc07fu);
            int n = 0;
            for (n = 0; n <= 31; n++, black_mask >>= 1)
            { if (((black_mask & 1) != 0) && (s.dyn_ltree[n].fc.freq != 0)) return 0; }
            if ((s.dyn_ltree[9].fc.freq != 0) || (s.dyn_ltree[10].fc.freq != 0) || (s.dyn_ltree[13].fc.freq != 0))
                return 1;
            for (n = 32; n < 256; n++)
            { if (s.dyn_ltree[n].fc.freq != 0) return 1; }
            return 0;
        }

        public static uint bi_reverse(uint code, int len)
        {
            uint res = 0;
            do
            {
                res |= code & 1;
                code >>= 1;
                res <<= 1;
            }
            while ((--len) > 0);
            return res >> 1;
        }

        public static void bi_flush(internal_state s)
        {
            if (s.bi_valid == 16)
            {
                {
                    {
                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                    }
                    {
                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                    }
                }
                s.bi_buf = 0;
                s.bi_valid = 0;
            }
            else if (s.bi_valid >= 8)
            {
                {
                    s.pending_buf[s.pending++] = (byte)s.bi_buf;
                }
                s.bi_buf >>= 8;
                s.bi_valid -= 8;
            }

        }

        public static void bi_windup(internal_state s)
        {
            if (s.bi_valid > 8)
            {
                {
                    {
                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) & 0xff);
                    }
                    {
                        s.pending_buf[s.pending++] = (byte)((s.bi_buf) >> 8);
                    }
                }
            }
            else if (s.bi_valid > 0)
            {
                {
                    s.pending_buf[s.pending++] = (byte)s.bi_buf;
                }
            }

            s.bi_buf = 0;
            s.bi_valid = 0;
        }

    }
}